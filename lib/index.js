// Generated by CoffeeScript 1.10.0
(function() {
  var Stylus, basename, dirname, extend, extname, filter, ref, replaceExt, stylus;

  ref = require('path'), basename = ref.basename, dirname = ref.dirname, extname = ref.extname;

  stylus = require('stylus');

  extend = (function(_this) {
    return function(object, properties) {
      var key, val;
      for (key in properties) {
        val = properties[key];
        object[key] = val;
      }
      return object;
    };
  })(this);

  filter = (function(_this) {
    return function(file, filters) {
      var f, ff, i, len;
      for (i = 0, len = filters.length; i < len; i++) {
        f = filters[i];
        ff = new RegExp(f);
        if (ff.test(file)) {
          return true;
        }
      }
      return false;
    };
  })(this);

  replaceExt = (function(_this) {
    return function(file, filters) {
      var f, ff, i, len;
      for (i = 0, len = filters.length; i < len; i++) {
        f = filters[i];
        ff = new RegExp(f);
        if (ff.test(file)) {
          return file.replace(ff, '.css');
        }
      }
    };
  })(this);

  Stylus = function(options) {
    var f, k, opts, v;
    opts = extend({
      master: null,
      outputDir: null,
      output: null,
      filter: '.styl, .stylus'
    }, options);
    f = opts.filter.split(',');
    for (k in f) {
      v = f[k];
      f[k] = v.replace(' ', '') + '$';
    }
    opts.filter = f;
    return function(files, metalsmith, done) {
      var file, includes, key;
      includes = [];
      for (key in files) {
        file = files[key];
        if (filter(key, opts.filter)) {
          (function(key, file) {
            var new_file, s;
            if (opts.master != null) {
              if (key.indexOf(opts.master) !== -1) {
                if ((opts.output != null) && (opts.outputDir != null)) {
                  new_file = opts.outputDir + '/' + opts.output;
                } else if ((opts.output != null) && (opts.outputDir == null)) {
                  new_file = replaceExt(key, opts.filter);
                } else if ((opts.outputDir != null) && (opts.output == null)) {
                  new_file = opts.outputDir + '/' + replaceExt(basename(key), opts.filter);
                }
                s = stylus(file.contents.toString()).set('filename', new_file).include(metalsmith._directory + '/**/*');
                s.render(function(err, css) {
                  if (err != null) {
                    throw err;
                  }
                  files[new_file] = file;
                  files[new_file].contents = new Buffer(css);
                  return delete files[key];
                });
                return includes.push.apply(includes, s.deps());
              } else if (key.indexOf(opts.master) === -1 && (includes.find(function(v) {
                return v.indexOf(basename(key));
              }) != null)) {
                return delete files[key];
              } else {
                new_file = opts.outputDir != null ? opts.outputDir + '/' + replaceExt(key, opts.filter) : replaceExt(key, opts.filter);
                s = stylus(file.contents.toString()).set('filename', key).include(metalsmith._directory + '/**/*');
                return s.render(function(err, css) {
                  if (err) {
                    throw err;
                  }
                  files[new_file] = files[key];
                  files[new_file].contents = new Buffer(css);
                  return delete files[key];
                });
              }
            } else {
              new_file = opts.outputDir != null ? opts.outputDir + '/' + replaceExt(key, opts.filter) : replaceExt(key, opts.filter);
              s = stylus(file.contents.toString()).set('filename', key).include(metalsmith._directory + '/**/*');
              return s.render(function(err, css) {
                if (err) {
                  throw err;
                }
                files[new_file] = files[key];
                files[new_file].contents = new Buffer(css);
                return delete files[key];
              });
            }
          })(key, file);
        }
      }
      return done();
    };
  };

  module.exports = Stylus;

}).call(this);
